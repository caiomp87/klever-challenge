// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CryptoServiceClient is the client API for CryptoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoServiceClient interface {
	CreateCrypto(ctx context.Context, in *CreateCryptoRequest, opts ...grpc.CallOption) (*CreateCryptoResponse, error)
	ReadCrypto(ctx context.Context, in *ReadCryptoRequest, opts ...grpc.CallOption) (*ReadCryptoResponse, error)
	ListCryptos(ctx context.Context, in *ListCryptosRequest, opts ...grpc.CallOption) (CryptoService_ListCryptosClient, error)
	UpdateCrypto(ctx context.Context, in *UpdateCryptoRequest, opts ...grpc.CallOption) (*UpdateCryptoResponse, error)
	DeleteCrypto(ctx context.Context, in *DeleteCryptoRequest, opts ...grpc.CallOption) (*DeleteCryptoResponse, error)
	AddLike(ctx context.Context, in *AddLikeRequest, opts ...grpc.CallOption) (*AddLikeResponse, error)
	RemoveLike(ctx context.Context, in *RemoveLikeRequest, opts ...grpc.CallOption) (*RemoveLikeResponse, error)
	AddDislike(ctx context.Context, in *AddDislikeRequest, opts ...grpc.CallOption) (*AddDislikeResponse, error)
	RemoveDislike(ctx context.Context, in *RemoveDislikeRequest, opts ...grpc.CallOption) (*RemoveDislikeResponse, error)
	CountVotes(ctx context.Context, in *CountVotesRequest, opts ...grpc.CallOption) (*CountVotesResponse, error)
	FilterByName(ctx context.Context, in *FilterByNameRequest, opts ...grpc.CallOption) (CryptoService_FilterByNameClient, error)
}

type cryptoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoServiceClient(cc grpc.ClientConnInterface) CryptoServiceClient {
	return &cryptoServiceClient{cc}
}

func (c *cryptoServiceClient) CreateCrypto(ctx context.Context, in *CreateCryptoRequest, opts ...grpc.CallOption) (*CreateCryptoResponse, error) {
	out := new(CreateCryptoResponse)
	err := c.cc.Invoke(ctx, "/crypto.CryptoService/CreateCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) ReadCrypto(ctx context.Context, in *ReadCryptoRequest, opts ...grpc.CallOption) (*ReadCryptoResponse, error) {
	out := new(ReadCryptoResponse)
	err := c.cc.Invoke(ctx, "/crypto.CryptoService/ReadCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) ListCryptos(ctx context.Context, in *ListCryptosRequest, opts ...grpc.CallOption) (CryptoService_ListCryptosClient, error) {
	stream, err := c.cc.NewStream(ctx, &CryptoService_ServiceDesc.Streams[0], "/crypto.CryptoService/ListCryptos", opts...)
	if err != nil {
		return nil, err
	}
	x := &cryptoServiceListCryptosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CryptoService_ListCryptosClient interface {
	Recv() (*ListCryptosResponse, error)
	grpc.ClientStream
}

type cryptoServiceListCryptosClient struct {
	grpc.ClientStream
}

func (x *cryptoServiceListCryptosClient) Recv() (*ListCryptosResponse, error) {
	m := new(ListCryptosResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cryptoServiceClient) UpdateCrypto(ctx context.Context, in *UpdateCryptoRequest, opts ...grpc.CallOption) (*UpdateCryptoResponse, error) {
	out := new(UpdateCryptoResponse)
	err := c.cc.Invoke(ctx, "/crypto.CryptoService/UpdateCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) DeleteCrypto(ctx context.Context, in *DeleteCryptoRequest, opts ...grpc.CallOption) (*DeleteCryptoResponse, error) {
	out := new(DeleteCryptoResponse)
	err := c.cc.Invoke(ctx, "/crypto.CryptoService/DeleteCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) AddLike(ctx context.Context, in *AddLikeRequest, opts ...grpc.CallOption) (*AddLikeResponse, error) {
	out := new(AddLikeResponse)
	err := c.cc.Invoke(ctx, "/crypto.CryptoService/AddLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) RemoveLike(ctx context.Context, in *RemoveLikeRequest, opts ...grpc.CallOption) (*RemoveLikeResponse, error) {
	out := new(RemoveLikeResponse)
	err := c.cc.Invoke(ctx, "/crypto.CryptoService/RemoveLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) AddDislike(ctx context.Context, in *AddDislikeRequest, opts ...grpc.CallOption) (*AddDislikeResponse, error) {
	out := new(AddDislikeResponse)
	err := c.cc.Invoke(ctx, "/crypto.CryptoService/AddDislike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) RemoveDislike(ctx context.Context, in *RemoveDislikeRequest, opts ...grpc.CallOption) (*RemoveDislikeResponse, error) {
	out := new(RemoveDislikeResponse)
	err := c.cc.Invoke(ctx, "/crypto.CryptoService/RemoveDislike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) CountVotes(ctx context.Context, in *CountVotesRequest, opts ...grpc.CallOption) (*CountVotesResponse, error) {
	out := new(CountVotesResponse)
	err := c.cc.Invoke(ctx, "/crypto.CryptoService/CountVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoServiceClient) FilterByName(ctx context.Context, in *FilterByNameRequest, opts ...grpc.CallOption) (CryptoService_FilterByNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &CryptoService_ServiceDesc.Streams[1], "/crypto.CryptoService/FilterByName", opts...)
	if err != nil {
		return nil, err
	}
	x := &cryptoServiceFilterByNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CryptoService_FilterByNameClient interface {
	Recv() (*Crypto, error)
	grpc.ClientStream
}

type cryptoServiceFilterByNameClient struct {
	grpc.ClientStream
}

func (x *cryptoServiceFilterByNameClient) Recv() (*Crypto, error) {
	m := new(Crypto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CryptoServiceServer is the server API for CryptoService service.
// All implementations must embed UnimplementedCryptoServiceServer
// for forward compatibility
type CryptoServiceServer interface {
	CreateCrypto(context.Context, *CreateCryptoRequest) (*CreateCryptoResponse, error)
	ReadCrypto(context.Context, *ReadCryptoRequest) (*ReadCryptoResponse, error)
	ListCryptos(*ListCryptosRequest, CryptoService_ListCryptosServer) error
	UpdateCrypto(context.Context, *UpdateCryptoRequest) (*UpdateCryptoResponse, error)
	DeleteCrypto(context.Context, *DeleteCryptoRequest) (*DeleteCryptoResponse, error)
	AddLike(context.Context, *AddLikeRequest) (*AddLikeResponse, error)
	RemoveLike(context.Context, *RemoveLikeRequest) (*RemoveLikeResponse, error)
	AddDislike(context.Context, *AddDislikeRequest) (*AddDislikeResponse, error)
	RemoveDislike(context.Context, *RemoveDislikeRequest) (*RemoveDislikeResponse, error)
	CountVotes(context.Context, *CountVotesRequest) (*CountVotesResponse, error)
	FilterByName(*FilterByNameRequest, CryptoService_FilterByNameServer) error
	mustEmbedUnimplementedCryptoServiceServer()
}

// UnimplementedCryptoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCryptoServiceServer struct {
}

func (UnimplementedCryptoServiceServer) CreateCrypto(context.Context, *CreateCryptoRequest) (*CreateCryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrypto not implemented")
}
func (UnimplementedCryptoServiceServer) ReadCrypto(context.Context, *ReadCryptoRequest) (*ReadCryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCrypto not implemented")
}
func (UnimplementedCryptoServiceServer) ListCryptos(*ListCryptosRequest, CryptoService_ListCryptosServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCryptos not implemented")
}
func (UnimplementedCryptoServiceServer) UpdateCrypto(context.Context, *UpdateCryptoRequest) (*UpdateCryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrypto not implemented")
}
func (UnimplementedCryptoServiceServer) DeleteCrypto(context.Context, *DeleteCryptoRequest) (*DeleteCryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCrypto not implemented")
}
func (UnimplementedCryptoServiceServer) AddLike(context.Context, *AddLikeRequest) (*AddLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLike not implemented")
}
func (UnimplementedCryptoServiceServer) RemoveLike(context.Context, *RemoveLikeRequest) (*RemoveLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLike not implemented")
}
func (UnimplementedCryptoServiceServer) AddDislike(context.Context, *AddDislikeRequest) (*AddDislikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDislike not implemented")
}
func (UnimplementedCryptoServiceServer) RemoveDislike(context.Context, *RemoveDislikeRequest) (*RemoveDislikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDislike not implemented")
}
func (UnimplementedCryptoServiceServer) CountVotes(context.Context, *CountVotesRequest) (*CountVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountVotes not implemented")
}
func (UnimplementedCryptoServiceServer) FilterByName(*FilterByNameRequest, CryptoService_FilterByNameServer) error {
	return status.Errorf(codes.Unimplemented, "method FilterByName not implemented")
}
func (UnimplementedCryptoServiceServer) mustEmbedUnimplementedCryptoServiceServer() {}

// UnsafeCryptoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoServiceServer will
// result in compilation errors.
type UnsafeCryptoServiceServer interface {
	mustEmbedUnimplementedCryptoServiceServer()
}

func RegisterCryptoServiceServer(s grpc.ServiceRegistrar, srv CryptoServiceServer) {
	s.RegisterService(&CryptoService_ServiceDesc, srv)
}

func _CryptoService_CreateCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).CreateCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto.CryptoService/CreateCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).CreateCrypto(ctx, req.(*CreateCryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_ReadCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).ReadCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto.CryptoService/ReadCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).ReadCrypto(ctx, req.(*ReadCryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_ListCryptos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCryptosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CryptoServiceServer).ListCryptos(m, &cryptoServiceListCryptosServer{stream})
}

type CryptoService_ListCryptosServer interface {
	Send(*ListCryptosResponse) error
	grpc.ServerStream
}

type cryptoServiceListCryptosServer struct {
	grpc.ServerStream
}

func (x *cryptoServiceListCryptosServer) Send(m *ListCryptosResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CryptoService_UpdateCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).UpdateCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto.CryptoService/UpdateCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).UpdateCrypto(ctx, req.(*UpdateCryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_DeleteCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).DeleteCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto.CryptoService/DeleteCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).DeleteCrypto(ctx, req.(*DeleteCryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_AddLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).AddLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto.CryptoService/AddLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).AddLike(ctx, req.(*AddLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_RemoveLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).RemoveLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto.CryptoService/RemoveLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).RemoveLike(ctx, req.(*RemoveLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_AddDislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDislikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).AddDislike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto.CryptoService/AddDislike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).AddDislike(ctx, req.(*AddDislikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_RemoveDislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDislikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).RemoveDislike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto.CryptoService/RemoveDislike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).RemoveDislike(ctx, req.(*RemoveDislikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_CountVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).CountVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto.CryptoService/CountVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).CountVotes(ctx, req.(*CountVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoService_FilterByName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilterByNameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CryptoServiceServer).FilterByName(m, &cryptoServiceFilterByNameServer{stream})
}

type CryptoService_FilterByNameServer interface {
	Send(*Crypto) error
	grpc.ServerStream
}

type cryptoServiceFilterByNameServer struct {
	grpc.ServerStream
}

func (x *cryptoServiceFilterByNameServer) Send(m *Crypto) error {
	return x.ServerStream.SendMsg(m)
}

// CryptoService_ServiceDesc is the grpc.ServiceDesc for CryptoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crypto.CryptoService",
	HandlerType: (*CryptoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCrypto",
			Handler:    _CryptoService_CreateCrypto_Handler,
		},
		{
			MethodName: "ReadCrypto",
			Handler:    _CryptoService_ReadCrypto_Handler,
		},
		{
			MethodName: "UpdateCrypto",
			Handler:    _CryptoService_UpdateCrypto_Handler,
		},
		{
			MethodName: "DeleteCrypto",
			Handler:    _CryptoService_DeleteCrypto_Handler,
		},
		{
			MethodName: "AddLike",
			Handler:    _CryptoService_AddLike_Handler,
		},
		{
			MethodName: "RemoveLike",
			Handler:    _CryptoService_RemoveLike_Handler,
		},
		{
			MethodName: "AddDislike",
			Handler:    _CryptoService_AddDislike_Handler,
		},
		{
			MethodName: "RemoveDislike",
			Handler:    _CryptoService_RemoveDislike_Handler,
		},
		{
			MethodName: "CountVotes",
			Handler:    _CryptoService_CountVotes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCryptos",
			Handler:       _CryptoService_ListCryptos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FilterByName",
			Handler:       _CryptoService_FilterByName_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "crypto.proto",
}
